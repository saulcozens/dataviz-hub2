{"version":3,"sources":["webpack:///./src/images/no_image.png","webpack:///./src/components_images/blog_background.jsx","webpack:///./src/pages/blog.jsx"],"names":["module","exports","BackgroundSection","className","children","query","render","data","imageData","desktop","childImageSharp","fluid","style","height","width","display","Blog","posts","allMdx","edges","title","keywords","totalCount","map","imagesrc","node","frontmatter","author","date","thumbnail","src","no_image_thumbnail","key","id","excerpt","fields","readingTime","minutes","to","slug","pageQuery"],"mappings":"stBAAAA,EAAOC,QAAU,IAA0B,wD,yICsD5BC,EAtCW,SAAC,GAAD,IAAEC,EAAF,EAAEA,UAAWC,EAAb,EAAaA,SAAb,OACxB,kBAAC,cAAD,CACEC,MAAK,aAWLC,OAAQ,SAAAC,GAEN,IAAMC,EAAYD,EAAKE,QAAQC,gBAAgBC,MAC/C,OACE,kBAAC,IAAD,CACAR,UAAWA,EACXQ,MAAOH,EACPI,MAAO,CACLC,OAAO,OACPC,MAAM,OACNC,QAAQ,SAGV,6BAAMX,KAzBZ,U,qBCjBF,0CAmEeY,UA3Df,YAAuB,IAART,EAAO,EAAPA,KACEU,EAAUV,EAAKW,OAAtBC,MACR,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,MAAM,OACNC,SAAU,CAAC,8BAA+B,qBAAsB,yBAA0B,cAG5F,kBAAC,EAAD,CAAmBlB,UAAU,gFAC3B,yBAAKA,UAAU,0BACb,wBAAIA,UAAU,YAAd,QAA8B,8BAC9B,uBAAGA,UAAU,WAAb,4BAKJ,yBAAKA,UAAU,0BAGb,yBAAKA,UAAU,uBACb,wCAAcI,EAAKW,OAAOI,WAA1B,UACCL,EAAMM,KAAI,YAAe,IAEpBC,EAFQC,EAAW,EAAXA,KAAW,EACSA,EAAKC,YAA7BN,EADe,EACfA,MAAOO,EADQ,EACRA,OAAQC,EADA,EACAA,KASvB,OALEJ,EADCC,EAAKC,aAAeD,EAAMC,YAAYG,WAAaJ,EAAKC,YAAYG,UAAUnB,gBACpEe,EAAKC,YAAYG,UAAUnB,gBAAgBC,MAAMmB,IAEjDC,IAIX,yBAAKC,IAAKP,EAAKQ,IACb,gCACE,yBAAKH,IAAKN,IACV,6BAAMJ,GACN,2CAAiBO,EAAjB,OAA6BC,EAA7B,MAEF,2BAAIH,EAAKS,SACT,2BAAIT,EAAKU,OAAOC,YAAYC,QAA5B,IAA0E,IAApCZ,EAAKU,OAAOC,YAAYC,QAAgB,MAAQ,OAAtF,SAEA,kBAAC,OAAD,CAAMC,GAAIb,EAAKU,OAAOI,MAAtB,gBACA,kCAOR,yBAAKpC,UAAU,8CASRa,IAMFwB,EAAS","file":"component---src-pages-blog-jsx-449685a22bc2143b9cb4.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/no_image-24a8b4077774de0801be09b6f77623c4.png\";","import React from \"react\"\r\nimport { StaticQuery, graphql } from \"gatsby\"\r\nimport BackgroundImage from 'gatsby-background-image'\r\nimport PropTypes from 'prop-types'\r\n\r\n/*\r\n * This component is built using `gatsby-image` to automatically serve optimized\r\n * images with lazy loading and reduced file sizes. The image is loaded using a\r\n * `useStaticQuery`, which allows us to load the image from directly within this\r\n * component, rather than having to pass the image data down from pages.\r\n *\r\n * For more information, see the docs:\r\n * - `gatsby-image`: https://gatsby.dev/gatsby-image\r\n * - `useStaticQuery`: https://www.gatsbyjs.org/docs/use-static-query/\r\n */\r\n\r\nconst BackgroundSection = ({className, children}) => (\r\n  <StaticQuery\r\n    query={graphql`\r\n      query {\r\n        desktop: file(relativePath: { eq: \"blog_b.jpg\" }) {\r\n          childImageSharp {\r\n            fluid(quality: 100, maxWidth: 1920) {\r\n              ...GatsbyImageSharpFluid_noBase64\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `}\r\n    render={data => {\r\n      // Set ImageData.\r\n      const imageData = data.desktop.childImageSharp.fluid\r\n      return (\r\n        <BackgroundImage\r\n        className={className}\r\n        fluid={imageData}\r\n        style={{\r\n          height: `70vh`,\r\n          width: `100%`,\r\n          display: `flex`,\r\n        }}\r\n        >\r\n        <div>{children}</div>\r\n        </BackgroundImage>\r\n      )\r\n    }}\r\n  />\r\n)\r\n\r\nBackgroundSection.propTypes = {\r\n  className: PropTypes.string,\r\n  children: PropTypes.node,\r\n}\r\n\r\nexport default BackgroundSection","import React from \"react\"\r\nimport { graphql, Link } from 'gatsby'\r\nimport Layout from \"../components/layout\"\r\nimport SEO from \"../components/seo\"\r\nimport PropTypes from 'prop-types'\r\nimport BackgroundSection from \"../components_images/blog_background\";\r\nimport no_image_thumbnail from \"../images/no_image.png\"\r\n\r\nfunction Blog({data}) {\r\n  const { edges: posts } = data.allMdx\r\n  return (\r\n    <Layout>\r\n      <SEO \r\n        title=\"Blog\" \r\n        keywords={[\"the university of sheffield\", \"data visualisation\", \"data visualisation hub\", \"research\"]} \r\n      />\r\n\r\n      <BackgroundSection className=\"flex flex-wrap justify-center self-center content-center items-center m-auto\">\r\n        <div className=\"text-white text-center\">\r\n          <h1 className=\"text-6xl\">Blog <br /></h1>\r\n          <p className=\"text-sm\">scientia potentia est.</p>\r\n          \r\n        </div>\r\n      </BackgroundSection>\r\n\r\n      <div className=\"flex flex-wrap-reverse\">\r\n        \r\n        {/* List of posts FIXME: beautify  */}\r\n        <div className=\"sm:w-3/4 px-10 py-8\">\r\n          <p>There are {data.allMdx.totalCount} posts</p>\r\n          {posts.map(({ node }) => {\r\n            const { title, author, date,} = node.frontmatter\r\n            let imagesrc\r\n            \r\n            if(node.frontmatter && node. frontmatter.thumbnail && node.frontmatter.thumbnail.childImageSharp) {\r\n              imagesrc = node.frontmatter.thumbnail.childImageSharp.fluid.src \r\n            } else {\r\n              imagesrc = no_image_thumbnail\r\n            }\r\n           \r\n            return (\r\n              <div key={node.id}>\r\n                <header>\r\n                  <img src={imagesrc}></img>\r\n                  <div>{title}</div>\r\n                  <div>Posting By {author} on {date} </div>\r\n                </header>\r\n                <p>{node.excerpt}</p>\r\n                <p>{node.fields.readingTime.minutes} {node.fields.readingTime.minutes === 1 ? \"min\" : \"mins\"} read</p>\r\n\r\n                <Link to={node.fields.slug}>View Article</Link>\r\n                <hr />\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n\r\n        {/* TODO: Add category & tags */}\r\n        <div className=\"w-full sm:w-1/4 px-10 py-8 bg-gray-300\">\r\n\r\n        </div>\r\n      </div>\r\n\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default Blog\r\n\r\nBlog.propTypes = {\r\n  data: PropTypes.any,\r\n}\r\n\r\nexport const pageQuery = graphql`\r\n  query blog {\r\n    allMdx(sort: { fields: [frontmatter___date], order: DESC }) {\r\n      edges {\r\n        node {\r\n          id\r\n          excerpt\r\n          fields {\r\n            slug\r\n            readingTime {\r\n              minutes\r\n            }\r\n          }\r\n          frontmatter {\r\n            title\r\n            author\r\n            date(formatString: \"dddd Do MMMM YYYY\")\r\n            category\r\n            tag\r\n            thumbnail {\r\n              childImageSharp {\r\n                fluid {\r\n                  src\r\n                }\r\n              }\r\n            }\r\n          } \r\n        }\r\n      }\r\n      totalCount\r\n    }\r\n  }\r\n`"],"sourceRoot":""}