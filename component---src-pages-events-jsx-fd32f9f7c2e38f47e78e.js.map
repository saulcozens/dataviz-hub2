{"version":3,"sources":["webpack:///./src/components_images/events_background.jsx","webpack:///./src/components_events/upcomingEvents.jsx","webpack:///./src/components_events/pastEvents.jsx","webpack:///./src/pages/events.jsx"],"names":["BackgroundSection","className","children","style","query","render","data","imageData","desktop","childImageSharp","fluid","UpcomingEvents","today","allEventbriteEvents","background","Date","Intl","DateTimeFormat","weekday","year","month","day","timeZoneName","format","edges","map","node","description","text","length","substring","concat","fontFamily","href","url","key","id","target","rel","src","logo","original","minHeight","maxHeight","objectFit","objectPosition","name","start","local","online_event","venue","address","address_1","city","postal_code","PastEvents","pastEvent","frontmatter","to","fields","slug","title","date","events","eventBrite","keywords","height","width"],"mappings":"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","file":"component---src-pages-events-jsx-fd32f9f7c2e38f47e78e.js","sourcesContent":["import React from \"react\"\r\nimport { StaticQuery, graphql } from \"gatsby\"\r\nimport BackgroundImage from 'gatsby-background-image'\r\nimport PropTypes from 'prop-types'\r\n\r\n/*\r\n * This component is built using `gatsby-image` to automatically serve optimized\r\n * images with lazy loading and reduced file sizes. The image is loaded using a\r\n * `useStaticQuery`, which allows us to load the image from directly within this\r\n * component, rather than having to pass the image data down from pages.\r\n *\r\n * For more information, see the docs:\r\n * - `gatsby-image`: https://gatsby.dev/gatsby-image\r\n * - `useStaticQuery`: https://www.gatsbyjs.org/docs/use-static-query/\r\n */\r\n\r\nconst BackgroundSection = ({className, children, style}) => (\r\n  <StaticQuery\r\n    query={graphql`\r\n      query {\r\n        desktop: file(relativePath: { eq: \"event.jpg\" }) {\r\n          childImageSharp {\r\n            fluid(quality: 100, maxWidth: 1920) {\r\n              ...GatsbyImageSharpFluid_noBase64\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `}\r\n    render={data => {\r\n      // Set ImageData.\r\n      const imageData = data.desktop.childImageSharp.fluid\r\n      return (\r\n        <BackgroundImage\r\n        className={className}\r\n        fluid={imageData}\r\n        style={style}\r\n        >\r\n        {children}\r\n        </BackgroundImage>\r\n      )\r\n    }}\r\n  />\r\n)\r\n\r\nBackgroundSection.propTypes = {\r\n  className: PropTypes.any,\r\n  children: PropTypes.node,\r\n  style: PropTypes.any,\r\n}\r\n\r\nexport default BackgroundSection","import React from 'react'\r\nimport PropTypes from \"prop-types\"\r\nimport { FaMapMarkerAlt, FaClock } from \"react-icons/fa\"\r\n\r\nconst UpcomingEvents = ({allEventbriteEvents}) => {\r\n  \r\n  function todayDate() {\r\n    var options = {\r\n      weekday: 'long', year: 'numeric', month: 'long', day: 'numeric',\r\n      timeZoneName: 'short'\r\n    };\r\n    \r\n    var today = new Date();\r\n    today = new Intl.DateTimeFormat('en-UK', options).format(today);\r\n    return today;\r\n  }\r\n  \r\n  return (\r\n    <div className=\"w-full sm:w-full md:w-full lg:w-8/12 xl:w-8/12 text-white px-8 pt-6 text-gray-800 lg:my-24 pb-16 flex-col flex-wrap overflow-auto border-t-8 border-gray-800\" style={{background: \"rgba(255,255,255,.95)\", }}>\r\n    <h1 className=\"inline-block text-3xl font-semibold\">Upcoming Events</h1>\r\n    <div className=\"text-gray-500 mb-8\" >Today: {todayDate()}</div>\r\n\r\n\r\n    {allEventbriteEvents.edges.map(({node}) => {\r\n      let description = node.description.text\r\n      if(description.length >= 140) {\r\n        description = description.substring(0,140).concat(\" ...\")\r\n      }\r\n\r\n      return (\r\n        <a className=\"flex flex-wrap w-full rounded overflow-auto shadow-md hover:shadow-xl bg-white my-4 text-gray-700 group border-solid hover:border-l-5 hover:border-highlight_2\" style={{ fontFamily: \"TUoS Blake\"}} href={node.url} key={node.id} target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <img className=\"w-full sm:w-full md:w-3/12 lg:w-3/12 xl:w-3/12\" src={node.logo.original.url} style={{minHeight: \"20vh\", maxHeight: \"30vh\", objectFit: \"cover\", objectPosition: \"center\"}} ></img>\r\n          <div className=\"w-full sm:w-full md:w-9/12 lg:w-9/12 xl:w-9/12 p-4\">\r\n            <p className=\"font-semibold text-lg text-gray-900 group-hover:text-highlight_2\">{node.name.text}</p>\r\n            <p className=\"text-gray-500 mt-1 hidden md:flex lg:flex xl:flex leading-tight\">{description}</p>\r\n            <p className=\"flex mt-4 group-hover:text-highlight_2\"><FaClock className=\"mr-1 mt-1\" />{node.start.local}</p>\r\n            \r\n            <div className=\"flex flex-wrap\">\r\n              <div className=\"w-full sm:w-full md:w-5/6 lg:w-5/6 xl:w-5/6\">\r\n                <p className=\"flex group-hover:text-highlight_2\">{node.online_event && (<FaMapMarkerAlt className=\"mr-1 mt-1\" />)} {node.online_event && (\"Online Event\") }</p>\r\n                <p className=\"flex group-hover:text-highlight_2\">\r\n                  {node.venue && ( <FaMapMarkerAlt className=\"mr-1 mt-1\" /> )} \r\n                  {node.venue && node.venue.name && (node.venue.name + \", \")} \r\n                  {node.venue && node.venue.address.address_1 && (node.venue.address.address_1 + \", \")} \r\n                  {node.venue && node.venue.address.city && (node.venue.address.city + \", \")}\r\n                  {node.venue && node.venue.address.postal_code && (node.venue.address.postal_code)}\r\n                </p>\r\n              </div>\r\n              <div className=\"flex flex-wrap w-full sm:w-full md:w-1/6 lg:w-1/6 xl:w-1/6 content-center justify-center\">\r\n                <button href={node.url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"hidden group-hover:flex rounded shadow-sm -mt-4 py-1 px-3 text-md bg-gray-600 text-white hover:bg-highlight_2\">\r\n                  Register\r\n                </button>\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n        </a>\r\n      \r\n        \r\n      )\r\n  \r\n    })}\r\n\r\n  </div>\r\n  )\r\n\r\n\r\n  \r\n}\r\n\r\nexport default UpcomingEvents\r\n\r\nUpcomingEvents.propTypes = {\r\n  allEventbriteEvents: PropTypes.any,\r\n}\r\n\r\n","import React from 'react'\r\nimport PropTypes from \"prop-types\"\r\nimport { Link } from \"gatsby\"\r\n\r\nconst PastEvents = ({pastEvent}) => {\r\n  \r\n  return (\r\n    <div className=\"flex flex-wrap w-full sm:w-full md:w-full lg:w-3/12 xl:w-3/12 text-gray-100 px-6 pb-16 lg:py-6 border-t-4 border-gray-800\" style={{background: \"rgba(0,0,0,.6)\", }}>\r\n      <h1 className=\"text-xl pb-6 font-semibold\">Past Events</h1>\r\n      \r\n      {pastEvent.edges.map(({ node }) => {\r\n\r\n        let description = node.frontmatter.description ? node.frontmatter.description : \"\"\r\n        if(description.length >= 85){\r\n          description = description.substring(0, 85).concat(\" ...\")\r\n        }\r\n\r\n        return (\r\n          <div className=\"flex flex-wrap bg-gray-100 p-3 w-full rounded overflow-auto shadow-md hover:shadow-xl bg-white my-1 text-gray-700 group border-solid border-r-8 border-red-600 hover:border-r-8 hover:border-highlight_2\" style={{ fontFamily: \"TUoS Blake\"}} key={node.id}>\r\n            <Link to={node.fields.slug}>\r\n            <p className=\"font-semibold text-sm text-gray-700 group-hover:text-highlight_2\">{node.frontmatter.title}</p>\r\n            <p className=\"text-gray-500 mt-1 hidden md:flex lg:flex xl:flex text-sm leading-4\">{description}</p>\r\n            <p className=\"mt-1 text-sm text-gray-700 group-hover:font-semibold\">{node.frontmatter.date}</p>\r\n            </Link>\r\n          </div>\r\n        )\r\n\r\n      })} \r\n      \r\n    </div>\r\n  )\r\n\r\n\r\n  \r\n}\r\n\r\nexport default PastEvents\r\n\r\nPastEvents.propTypes = {\r\n  pastEvent: PropTypes.any,\r\n}\r\n\r\n","import React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\nimport Layout from \"../components/layout\"\r\nimport SEO from \"../components/seo\"\r\nimport BackgroundSection from \"../components_images/events_background\"\r\nimport PropTypes from \"prop-types\"\r\nimport UpcomingEvents from \"../components_events/upcomingEvents\"\r\nimport PastEvents from \"../components_events/pastEvents\"\r\n\r\nfunction events({data: {eventBrite, pastEvent}}) {\r\n  \r\n\r\n  return (\r\n    <Layout>\r\n      <SEO \r\n        title=\"Events\" \r\n        keywords={[\"the university of sheffield\", \"data visualisation\", \"data visualisation hub\", \"research\", \"events\"]} \r\n      />\r\n      \r\n      <BackgroundSection className=\"flex flex-wrap flex-grow-0 items-center justify-center content-center\" style={{height: \"100%\", width: \"100%\"}}>\r\n        \r\n        <UpcomingEvents allEventbriteEvents={eventBrite} />\r\n        <PastEvents pastEvent={pastEvent} />    \r\n  \r\n      </BackgroundSection>\r\n\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default events\r\n\r\nevents.propTypes = {\r\n\t\tdata: PropTypes.any\r\n  }\r\n  \r\n  \r\nexport const query = graphql`\r\n  query {\r\n    eventBrite: \r\n    allEventbriteEvents(sort: {fields: start___local, order: ASC}, filter: {start: {local: {lt: \"TODAY\"}}}, limit: 3) {\r\n      edges {\r\n        node {\r\n          id\r\n          url\r\n          name{\r\n            text\r\n          }\r\n          description {\r\n            text\r\n          }\r\n          logo {\r\n            original {\r\n              url\r\n            }\r\n          }\r\n          venue {\r\n            name\r\n            address {\r\n              address_1\r\n              city\r\n              postal_code\r\n            }\r\n          }\r\n          online_event\r\n          capacity_is_custom\r\n          start {\r\n            local(formatString: \"ddd, DD MMMM YYYY @ hh:mm A\", locale: \"en-GB\")\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    pastEvent: \r\n    allMdx(limit: 5, filter: {frontmatter: {category: {in: \"Events\"}}}, sort: {order: DESC, fields: frontmatter___date}) {\r\n      edges {\r\n        node {\r\n          fields {\r\n            slug\r\n            readingTime {\r\n              text\r\n            }\r\n          }\r\n          id\r\n          frontmatter {\r\n            date(formatString: \"ddd, DD MMMM YYYY\")\r\n            title\r\n            description\r\n          }\r\n        }\r\n      }\r\n    }\r\n  \r\n  }\r\n`"],"sourceRoot":""}